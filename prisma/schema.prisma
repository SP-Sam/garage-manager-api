generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum RoleSlug {
  MASTER
  MANAGER
  MECHANIC
}

enum ServiceStatusEnum {
  STARTED
  FINISHED
  PENDING
}

model EmployeeRole {
  id        Int      @id @default(autoincrement())
  name      String   @db.VarChar(50)
  slug      RoleSlug @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  employee Employee[]
}

model Employee {
  id            Int      @id @default(autoincrement())
  fullName      String   @db.VarChar(64)
  email         String   @unique
  password      String   @db.VarChar(64)
  mobile        String   @db.Char(11)
  taxId         String   @unique @db.Char(11)
  address       String?
  addressNumber Int?
  city          String?
  state         String?
  roleId        Int
  creatorId     Int?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now())

  employeeRole EmployeeRole @relation(fields: [roleId], references: [id])
  services     Service[]
  customers    Customer[]

  creator   Employee?  @relation("EmployeeCreator", fields: [creatorId], references: [id])
  employees Employee[] @relation("EmployeeCreator")
}

model Customer {
  id            Int      @id @default(autoincrement())
  fullName      String   @db.VarChar(64)
  email         String   @unique
  mobile        String   @db.Char(11)
  taxId         String   @unique @db.Char(11)
  address       String?
  addressNumber Int?
  city          String?
  state         String?
  employeeId    Int
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now())

  services Service[]
  vehicles Vehicle[]
  employee Employee  @relation(fields: [employeeId], references: [id])
}

model Service {
  id         Int               @id @default(autoincrement())
  name       String
  totalCost  Float
  status     ServiceStatusEnum @default(STARTED)
  employeeId Int
  customerId Int
  vehicleId  Int
  createdAt  DateTime          @default(now())
  updatedAt  DateTime          @default(now())

  partsOnServices PartsOnServices[]

  employee Employee @relation(fields: [employeeId], references: [id])
  customer Customer @relation(fields: [customerId], references: [id])
  vehicle  Vehicle  @relation(fields: [vehicleId], references: [id])
}

model PartsOnServices {
  serviceId Int
  carPartId Int

  service Service @relation(fields: [serviceId], references: [id])
  carPart CarPart @relation(fields: [carPartId], references: [id])

  @@id([serviceId, carPartId])
}

model CarPart {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  price     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  partsOnServices PartsOnServices[]
}

model Vehicle {
  id         Int      @id @default(autoincrement())
  model      String
  brand      String
  engine     Float?
  color      String?
  customerId Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now())

  customer Customer  @relation(fields: [customerId], references: [id])
  service  Service[]
}
